openapi: 3.0.0
info:
  version: '0.13.0-rc05'
  title: 'Karmen API'
  description: 'API of https://github.com/fragaria/karmen'
tags:
  - name: printers
    description: Printers endpoints
  - name: users-me
    description: Auth endpoints
paths:
  '/organizations/{org_uuid}/printers/{printer_uuid}':
    get:
      summary: Return printer data
      operationId: server.routes.printers.printer_detail
      tags:
        - printers
      parameters:
        - $ref: '#/components/parameters/printer_uuid_param'
        - $ref: '#/components/parameters/organization_uuid_param'
        - $ref: '#/components/parameters/fields_filter'

      responses:
        '200':
          description: 'OK, printer object is returned'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/printer_response'
        '404':
          description: >-
            Printer not found. It either doesn't exists, or belongs to another
            organization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_err_response'
              example:
                message: Not found
        '400':
           $ref: '#/components/responses/invalid_UUID'
    patch:
      summary: Change printer properties, modify it's name or change API key
      operationId: server.routes.printers.printer_patch
      tags:
        - printers
      parameters:
        - $ref: '#/components/parameters/printer_uuid_param'
        - $ref: '#/components/parameters/organization_uuid_param'
      responses:
        '200':
          description: 'OK, printer object is returned'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/printer_response'
        '404':
          description: >-
            Printer not found. It either doesn't exists, or is not in this
            organization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_err_response'
              example:
                message: Not found
        '400':
          description: Could not update printer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_err_response'
              examples:
                no_payload:
                  summary: Missing payload
                  description: no payload was sent
                  value:
                    message: Missing payload
                missing_name:
                  summary: name field is missing or empty
                  description: Sent payload was missing name field or it has zero length. Name is always required.
                  value:
                    message: Missing name
    delete:
      summary: Delete printer
      operationId: server.routes.printers.printer_delete
      tags:
        - printers
      parameters:
        - $ref: '#/components/parameters/printer_uuid_param'
        - $ref: '#/components/parameters/organization_uuid_param'
      responses:
        '204':
          description: 'OK, printer deleted'

        '404':
          description: >-
            Printer not found. It either doesn't exists, or belongs to another
            organization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_err_response'
              example:
                message: Not found
        '400':
          $ref: '#/components/responses/invalid_UUID'

  '/organizations/{org_uuid}/printers':
    get:
      summary: Get list of printers in an organization
      operationId: server.routes.printers.printers_list
      tags:
        - printers
      parameters:
        - $ref: '#/components/parameters/organization_uuid_param'
        - $ref: '#/components/parameters/fields_filter'

      responses:
        '200':
          description: 'OK, list of printer objects is returned'
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/printer_response'
        '400':
           $ref: '#/components/responses/invalid_UUID'
        '403':
          description: >-
            User is not a member of this organization, or doesn't exists at all
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_err_response'
              example:
                message: Cannot access this organization
    post:
      summary: Create printer
      operationId: server.routes.printers.printer_create
      tags:
        - printers
      description: >-
        Post to this endpoint to add a printer. In CLOUD_MODE, you can add printer by token.
        In non-CLOUD mode, printer addition requires specifying the network address (IP or hostname).
        Now, we only specify printer_by_network_props, and printer_by_token is commented. This is because
        of a bug in connexion https://github.com/zalando/connexion/issues/691 because of which oneOf doesn't work
        in request bodies
      parameters:
        - $ref: '#/components/parameters/organization_uuid_param'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              #oneOf:
              # $ref: '#/components/schemas/printer_by_token'
              # $ref: '#/components/schemas/printer_by_network_props'
              $ref: '#/components/schemas/printer_by_network_props'
              # bug in connexion https://github.com/zalando/connexion/issues/691 prevent us from using oneOf
            examples:
              by_token:
                summary: Add printer by token
                value:
                  name: Printer name
                  token: ABC123
                  protocol: https
                  api_key: ""
              by_net_props:
                summary: Add printer by network address
                value:
                  name: Printer name
                  ip: 192.1368.5.42
                  port: 80
                  hostname: karmen.local
                  path: ""
                  api_key: ""



      responses:
        '200':
          description: 'OK, printer_response is returned without additional fields'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/printer_response'
        '400':
          description: Could not create printer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_err_response'
              examples:
                missing_token:
                  summary: Missing token
                  description: None or zero-length token was sent
                  value:
                    message: Missing token
                missing_net_data:
                  summary: Incomplete network data
                  description: You are trying to add printer in non-cloud mode, but not enough data to identify the printer in network was supplied.
                  value:
                    message: Missing some network data about the printer

        '409':
          description: >-
            Printer with this token or ip, port, path already exists in this organization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_err_response'
              example:
                message: Printer already exists
        '500':
          description: >-
            Error while adding printer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_err_response'
              examples:
                unresolved_hostname:
                  summary: Unresolved hostname
                  description:  You are trying to add printer via hostname, but the server was unable to resolve that hostname to an IP
                  value:
                    message: Cannot resolve {hostname} with mDNS
                invalid_mode:
                  summary: Wrong CLOUD mode
                  description: You are trying to add printer in non-cloud mode, but not enough data to identify the printer in network was supplied
                  value:
                    message: Cannot add printer without a token in CLOUD_MODE

  '/organizations/{org_uuid}/printers/{printer_uuid}/connection':
    post:
      summary: Change connections state
      operationId: server.routes.printers.printer_change_connection
      tags:
        - printers
      parameters:
        - $ref: '#/components/parameters/printer_uuid_param'
        - $ref: '#/components/parameters/organization_uuid_param'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                state:
                  type: string
                  enum: [online, offline]
            examples:
              connect:
                value:
                  state: online
              disconnect:
                value:
                  state: offline

      responses:
        '204':
          description: 'OK'

        '400':
          description: >-
            Invalid state was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_err_response'
              example:
                message: <state> is an uknown state
        '500':
          description: >-
            Cannot change printer's state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_err_response'
              example:
                message: Cannon change printer's connection state to <state>

  '/organizations/{org_uuid}/printers/{printer_uuid}/current-job':
    post:
      summary: Change  state of current job
      operationId: server.routes.printers.printer_modify_job
      tags:
        - printers
      parameters:
        - $ref: '#/components/parameters/printer_uuid_param'
        - $ref: '#/components/parameters/organization_uuid_param'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                action:
                  type: string
                  enum: [cancel, pause, resume]
            examples:
              cancel current job:
                value:
                  action: cancel
              pause current job:
                value:
                  action: cancel
              resume paused job:
                value:
                  action: resume

      responses:
        '204':
          description: 'OK'

        '400':
          description: >-
            Invalid state was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_err_response'
              examples:
                Missing action:
                  value:
                    message: Missing action
                No job to modify:
                  value:
                    message: Nothing is running
                Generic printer error:
                  value:
                    message: <<generic printer error from control software>>

  '/organizations/{org_uuid}/printers/{printer_uuid}/webcam-snapshot':
    get:
      summary: Get snapshot from the webcam
      operationId: server.routes.printers.printer_webcam_snapshot
      tags:
        - printers
      parameters:
        - $ref: '#/components/parameters/printer_uuid_param'
        - $ref: '#/components/parameters/organization_uuid_param'
      responses:
        '200':
          description: 'OK, image is returned'
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
        '202':
          description: Karmen is establishing connection with the printer. Please try again later

        '404':
          description: >-
            Printer was not found or it doesn't have a webcam, or the image was not found at the expected url
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_err_response'
              example:
                message: Not found

  '/organizations/{org_uuid}/printers/{printer_uuid}/lights':
    post:
      summary: Toggle state of printer light
      operationId: server.routes.printers.printer_set_lights
      tags:
        - printers
      parameters:
        - $ref: '#/components/parameters/printer_uuid_param'
        - $ref: '#/components/parameters/organization_uuid_param'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                status:
                  type: string
                  enum: [on, off]
            examples:
              turn on:
                value:
                  status: on
              turn off:
                value:
                  status: off
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
                    enum: [on, off]

        '500':
          description: >-
            Light is no available with this printer
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
                    enum: [unavailable]

  '/organizations/{org_uuid}/printers/{printer_uuid}/printhead':
    post:
      summary: Move printer head
      operationId: server.routes.printers.control_printhead
      tags:
        - printers
      parameters:
        - $ref: '#/components/parameters/printer_uuid_param'
        - $ref: '#/components/parameters/organization_uuid_param'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                command:
                  type: string
                  enum: [jog, home]
                x:
                  type: integer
                y:
                  type: integer
                z:
                  type: integer
                absolute:
                  type: boolean
                axes:
                  type: array

            examples:
              move X by 10 cm:
                value:
                  command: jog
                  x: 10
                  absolute: false
              move Y by -10 cm:
                value:
                  command: jog
                  z: -10
                  absolute: false
              home X and Y:
                value:
                  command: home
                  axes: [x, y]

      responses:
        '204':
          description: 'OK'

        '400':
          description: >-
            Unable to process
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_err_response'
              examples:
                Invalid distance:
                  value:
                    message: Distance on <axis> must be a number
                Invalid axis:
                  value:
                    message: <axis> is not a valid axes value
                Unknow command:
                  value:
                    message: Unknown command
                No list of axes to home was sent:
                  value:
                    message: Missing axes

        '500':
          description: >-
            Printer refused to move the head
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_err_response'
              example:
                message: Cannot move the printhead

  '/organizations/{org_uuid}/printers/{printer_uuid}/fan':
    post:
      summary: Toggle state of the printer fan
      operationId: server.routes.printers.control_fan
      tags:
        - printers
      parameters:
        - $ref: '#/components/parameters/printer_uuid_param'
        - $ref: '#/components/parameters/organization_uuid_param'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                target:
                  type: string
                  enum: ['on', 'off']
            examples:
              turn on:
                value:
                  target: on
              turn off:
                value:
                  target: off
      responses:
        '204':
          description: OK
        '400':
          description: >-
            Target is not on or off
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_err_response'
              example:
                message: Invalid target

        '500':
          description: >-
            Printer has refused to toggle the fan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_err_response'
              example:
                message: Cannot control fan

  '/organizations/{org_uuid}/printers/{printer_uuid}/motors':
    post:
      summary: Disable motors
      operationId: server.routes.printers.control_motors
      tags:
        - printers
      parameters:
        - $ref: '#/components/parameters/printer_uuid_param'
        - $ref: '#/components/parameters/organization_uuid_param'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                target:
                  type: string
                  enum: ['off']
            examples:
              disable:
                value:
                  target: off
      responses:
        '204':
          description: OK
        '400':
          description: >-
            Target is not off
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_err_response'
              example:
                message: Invalid target

        '500':
          description: >-
            Printer refused to disable motors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_err_response'
              example:
                message: Cannot control motors

  '/organizations/{org_uuid}/printers/{printer_uuid}/extrusion':
    post:
      summary: Extrude or retract filament
      operationId: server.routes.printers.control_extrusion
      tags:
        - printers
      parameters:
        - $ref: '#/components/parameters/printer_uuid_param'
        - $ref: '#/components/parameters/organization_uuid_param'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                target:
                  type: string
                  enum: [on, off]
            examples:
              turn on:
                value:
                  target: on
              turn off:
                value:
                  target: off
      responses:
        '204':
          description: OK
        '400':
          description: >-
            Target is not on or off
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_err_response'
              example:
                message: Invalid target

        '500':
          description: >-
            Printer refused to extract or retrude filament
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_err_response'
              example:
                message: Cannot control extruder motor

  '/organizations/{org_uuid}/printers/{printer_uuid}/temperatures/{part_name}':
    post:
      summary: Set desired temperatures for part
      operationId: server.routes.printers.control_tool_temperature
      tags:
        - printers
      parameters:
        - $ref: '#/components/parameters/printer_uuid_param'
        - $ref: '#/components/parameters/organization_uuid_param'
        - in: path
          name: part_name
          schema:
            type: string
            enum: [tool0, tool1, bed]
          required: true
          description: Part to set semperature for


      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                target:
                  type: number
                  minimum: 0
              required:
                - target

            example:
              target: 60.0

      responses:
        '204':
          description: 'OK'

        '400':
          description: >-
            Unable to process
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_err_response'
              examples:
                Invalid part:
                  value:
                    message: <part_name> is not a valid part choice
                Invalid temperature:
                  value:
                    message: Target must be a number
                Negative temp:
                  value:
                    message: Cannot set negative temperature


        '500':
          description: >-
            Printer has refused to adjust the temperature
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_err_response'
              example:
                message: Cannot set temperature

  '/organizations/{org_uuid}/printers/{printer_uuid}/update':
    post:
      summary: Start update
      operationId: server.routes.printers.start_pill_update
      tags:
        - printers
      parameters:
        - $ref: '#/components/parameters/printer_uuid_param'
        - $ref: '#/components/parameters/organization_uuid_param'

      responses:
        '200':
          description: 'OK'

        '400':
          description: >-
            Unable to process
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_err_response'
              examples:
                Not a pill:
                  value:
                    message: The automatic update is supported on original Pill devices only
                No update available:
                  value:
                    message: Update is not available for the device at the moment

        '500':
          description: >-
            Pill was unable to start the update process,
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_err_response'
              example:
                message: Unable to start update



  '/users/me':
    post:
      summary: Register new user
      operationId: server.routes.users_me.create_inactive_user
      tags:
        - users-me
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                  format: email
      responses:
        '202':
          description: 'User created, empty response'
        '400':
          description: Unable to create user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_err_response'
              examples:
                Missing email:
                  value:
                    message: Missing email
                Bad role:
                  value:
                    message: Bad role
                Invalid email:
                  value:
                    message: Invalid email
    patch:
      summary: 'Change username'
      operationId: server.routes.users_me.patch_user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                username:
                  type: string
                  format: username
      tags:
        - users-me
      responses:
        '200':
          description: 'Username changed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user_full_response'
        '401':
          description: Unauthorized
        '400':
          description: Cannot change
  '/users/me/activate':
    post:
      summary: 'Activate newly created user'
      operationId: server.routes.users_me.activate_user
      tags:
        - users-me
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                  format: email
                activation_key:
                  type: string
                password:
                  type: string
                  format: password
                password_confirmation:
                  type: string
                  format: password
      responses:
        '204':
          description: 'User activated'
        '404':
          description: Activation failed
  '/users/me/request-password-reset':
    post:
      operationId: server.routes.users_me.request_password_reset
      summary: 'Request password reset for user'
      tags:
        - users-me
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                  format: email
      responses:
        '202':
          description: 'Password reset requested, empty response'
        '400':
          description: Request not valid
  '/users/me/reset-password':
    post:
      summary: 'Process requested password reset'
      operationId: server.routes.users_me.reset_password
      tags:
        - users-me
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                  format: email
                pwd_reset_key:
                  type: string
                password:
                  type: string
                  format: password
                password_confirmation:
                  type: string
                  format: password
      responses:
        '204':
          description: 'Password changed'
        '400':
          description: 'Password reset unsuccessfull'
  '/users/me/authenticate':
    post:
      summary: 'Login using username and password and get refresh token'
      operationId: server.routes.users_me.authenticate
      tags:
        - users-me
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password

      responses:
        '200':
          description: 'Login successfull'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user_full_response'
        '401':
          description: Wrong login
  '/users/me/authenticate-fresh':
    post:
      summary: 'Get new access token and no refresh token'
      operationId: server.routes.users_me.authenticate_fresh
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      tags:
        - users-me
      responses:
        '200':
          description: 'Ok'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user_full_response'
        '401':
          description: 'Unauthorized'

  '/users/me/authenticate-refresh':
    post:
      summary: 'Get new refresh token'
      operationId: server.routes.users_me.authenticate_refresh
      tags:
        - users-me
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user_full_response'
  '/users/me/logout':
    post:
      summary: 'Invalidate current token'
      operationId: server.routes.users_me.logout
      tags:
        - users-me
      responses:
        '200':
          description: 'Logged out'
          content:
            application/json:
              schema:
                type: object
                properties:
                  logout:
                    type: boolean
                    example: true
  '/users/me/password':
    patch:
      summary: 'Change password'
      operationId: server.routes.users_me.change_password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                password:
                  type: string
                  format: password
                new_password:
                  type: string
                  format: password
                new_password_confirmation:
                  type: string
                  format: password
      tags:
        - users-me
      responses:
        '200':
          description: 'Ok'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user_full_response'
        '401':
          description: 'Unauthorized'

  '/users/me/tokens':
    get:
      summary: List current user's API tokens
      operationId: server.routes.users_me.list_api_tokens
      tags:
        - users-me
      responses:
        '200':
          description: 'List of tokens'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user_access_token_brief'
    post:
      summary: 'Create new API token'
      operationId: server.routes.users_me.create_api_token
      tags:
        - users-me
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user_access_token_new'
  '/users/me/tokens/{jti}':
    delete:
      summary: 'Revoke API token'
      operationId: server.routes.users_me.revoke_api_token
      tags:
        - users-me
      parameters:
        - $ref: '#/components/parameters/jti'
      responses:
        '204':
          description: 'Revoked'

  '/tests-admin/users/create':
    post:
      summary: Create new user for tests. User is instantly activated.
      operationId: server.routes.tests_admin.create_test_user
      tags:
        - tests-admin
      parameters:
        - $ref: '#/components/parameters/local-tests-token'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '202':
          description: 'User created, empty response'
        '400':
          description: Unable to create user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_err_response'
              examples:
                Missing email:
                  value:
                    message: Missing email
                Bad role:
                  value:
                    message: Bad role
                Invalid email:
                  value:
                    message: Invalid email
  '/tests-admin/users/register':
    post:
      summary: Register a new user for testing an activation key.
      operationId: server.routes.tests_admin.register_test_user
      tags:
        - tests-admin
      parameters:
        - $ref: '#/components/parameters/local-tests-token'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                  format: email
      responses:
        '202':
          description: 'User registered, empty response'
        '400':
          description: Unable to register user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_err_response'
              examples:
                Missing email:
                  value:
                    message: Missing email
                Bad role:
                  value:
                    message: Bad role
                Invalid email:
                  value:
                    message: Invalid email
  '/tests-admin/organizations/':
    post:
      summary: Create organization
      operationId: server.routes.tests_admin.create_organization
      tags:
        - tests-admin
      parameters:
        - $ref: '#/components/parameters/local-tests-token'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                local-tests-token:
                  $ref: '#/components/schemas/local-tests-token'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                  uuid:
                    type: string
        '400':
          description: Unable to create org
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_err_response'

  '/tests-admin/organizations/{org_uuid}/users':
    post:
      summary: Add user to organization by his UUID
      description: Used only for local tests. User must already exist
      operationId: server.routes.tests_admin.add_user_to_org
      tags:
        - tests-admin
      parameters:
        - $ref: '#/components/parameters/organization_uuid_param'
        - $ref: '#/components/parameters/local-tests-token'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                uuid:
                 $ref: '#/components/schemas/uuid'
                role:
                  type: string
                  enum: [user, admin]
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/organization_user_profile'
        '400':
          description: Unable to create or add user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_err_response'
    delete:
      summary: Remove user from organization
      description: Used only for local tests.
      operationId: server.routes.tests_admin.remove_user_from_org
      tags:
        - tests-admin
      parameters:
        - $ref: '#/components/parameters/organization_uuid_param'
        - $ref: '#/components/parameters/local-tests-token'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                uuid:
                 $ref: '#/components/schemas/uuid'
      responses:
        '204':
          description: ''
        '400':
          description: Unable to create or add user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_err_response'



  '/organizations/{org_uuid}/users':
    post:
      summary: Add user to organization by his email
      description: If user exists, he is added to the org. Otherwise, new account is created and invitation is sent to him
      operationId: server.routes.users.add_user_to_org
      tags:
        - users
      parameters:
        - $ref: '#/components/parameters/organization_uuid_param'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                  format: email
                role:
                  type: string
                  enum: [user, admin]
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/organization_user_profile'
        '400':
          description: Unable to create or add user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_err_response'
              examples:
                Missing email:
                  value:
                    message: Missing email
                Bad role:
                  value:
                    message: Bad role
                Invalid email:
                  value:
                    message: Invalid email
    get:
      summary: 'Get list of users in an organization'
      operationId: server.routes.users.list_users
      tags:
        - users
      parameters:
        - $ref: '#/components/parameters/organization_uuid_param'
      responses:
        '200':
          description: 'List of users'
          content:
            application/json:
              schema:
                items:
                  type: array
                  items:
                    $ref: '#/components/schemas/organization_user_profile'
  '/organizations/{org_uuid}/users/{user_uuid}':
    patch:
      summary: Change user's role in an organization
      operationId: server.routes.users.update_user
      tags:
        - users
      parameters:
        - $ref: '#/components/parameters/organization_uuid_param'
        - $ref: '#/components/parameters/user_uuid_param'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                role:
                  type: string
                  enum: [user, admin]
      responses:
        '200':
          description: 'Role changed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/organization_user_profile'
        '400':
          description: 'Bad role'
    delete:
      summary: 'Remove user from an organization'
      operationId: server.routes.users.delete_user
      tags:
        - users
      parameters:
        - $ref: '#/components/parameters/organization_uuid_param'
        - $ref: '#/components/parameters/user_uuid_param'
      responses:
        '204':
          description: 'User removed'
        '409':
          description: Cannot remove yourself


  '/organizations/{org_uuid}/gcodes':
    get:
      summary: 'List new gcodes'
      operationId: server.routes.gcodes.gcodes_list
      tags:
        - gcodes
      parameters:
        - $ref: '#/components/parameters/organization_uuid_param'
        - $ref: '#/components/parameters/limit_count_filter'
        - $ref: '#/components/parameters/order_by_filter'
        - $ref: '#/components/parameters/fields_filter'
        - $ref: '#/components/parameters/filter_filter'
        - in: query
          name: start_with
          schema:
            $ref: '#/components/schemas/uuid_or_positive_integer'
      responses:
        '200':
          description: 'List of gcodes'
          content:
            application/json:
              schema:
                items:
                  type: array
                  items:
                    $ref: '#/components/schemas/gcode_detail'
    post:
      summary: 'Upload gcode'
      operationId: server.routes.gcodes.gcode_create
      tags:
        - gcodes
      parameters:
        - $ref: '#/components/parameters/organization_uuid_param'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                path:
                  type: string
                  format: binary
                file:
                  type: string
                  format: binary
      responses:
        '201':
          description: 'Created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/gcode_detail'

  '/organizations/{org_uuid}/gcodes/{gcode_uuid}':
    get:
      summary: 'Get gcode details'
      operationId: server.routes.gcodes.gcode_detail
      tags:
        - gcodes
      parameters:
        - $ref: '#/components/parameters/organization_uuid_param'
        - $ref: '#/components/parameters/gcode_uuid_param'
      responses:
        '200':
          description: 'Gcode details'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/gcode_detail'

    delete:
      summary: 'Delete gcode'
      operationId: server.routes.gcodes.gcode_delete
      tags:
        - gcodes
      parameters:
        - $ref: '#/components/parameters/organization_uuid_param'
        - $ref: '#/components/parameters/gcode_uuid_param'
      responses:
        '204':
          description: 'Deleted'
  '/organizations/{org_uuid}/gcodes/{gcode_uuid}/data':
    get:
      summary: 'Download gcode file'
      operationId: server.routes.gcodes.gcode_file
      tags:
        - gcodes
      parameters:
        - $ref: '#/components/parameters/organization_uuid_param'
        - $ref: '#/components/parameters/gcode_uuid_param'
      responses:
        '200':
          description: 'Gcode file'
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary


  '/octoprint-emulator/api/version':
    get:
      summary: >-
        Get octoprint version - this returns dummy version to trick some slicers into thinking
        this is a valid Octoprint, otherwise they won't talk to us
      operationId: server.routes.octoprintemulator.version
      tags:
        - octoprint-emulator
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                  type: object
                  properties:
                    api:
                      type: string
                      example: karmen
                    text:
                      type: string
                      example: "OctoPrint emulator by Karmen"
                    server:
                      type: string
                      description: karmen version
                      example: v0.9.0


  '/octoprint-emulator/api/settings':
    get:
      summary: >-
        Gect octoprint settings - this returns dummy settings to trick some slicers into thinking
        this is a valid Octoprint, otherwise they won't talk to us
      operationId: server.routes.octoprintemulator.settings
      tags:
        - octoprint-emulator
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object

  '/octoprint-emulator/api/printer':
    get:
      summary: >-
        Get printer status - this returns dummy status to trick some slicers into thinking
        this is a valid Octoprint, otherwise they won't talk to us
      operationId: server.routes.octoprintemulator.printer
      tags:
        - octoprint-emulator
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  sd:
                    type: object
                    properties:
                      ready:
                        type: boolean
                        example: True
                  state:
                    type: object
                    properties:
                      text:
                        type: sting
                        example: Operational
                      flags:
                        type: object
                        properties:
                          cancelling:
                            type: boolean
                            example: false
                          closedOnError:
                            type: boolean
                            example: false
                          error:
                            type: boolean
                            example: false
                          finishing:
                            type: boolean
                            example: false
                          operational:
                            type: boolean
                            example: true
                          paused:
                            type: boolean
                            example: false
                          pausing:
                            type: boolean
                            example: false
                          printing:
                            type: boolean
                            example: false
                          ready:
                            type: boolean
                            example: true
                          resuming:
                            type: boolean
                            example: false
                          sdReady:
                             type: boolean
                             example: true






  '/octoprint-emulator/api/job':
    get:
      summary: >-
        Get job status - this returns dummy status to trick some slicers into thinking
        this is a valid Octoprint, otherwise they won't talk to us
      operationId: server.routes.octoprintemulator.job
      tags:
        - octoprint-emulator
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  job:
                    type: object

  '/octoprint-emulator/api/files/local':
    post:
      summary: >-
        Upload gcode to Karmen. Pretends to be Octoprint so you can use "Send gcode to octoprint" option
        in some slicers
      operationId: server.routes.octoprintemulator.upload
      tags:
        - octoprint-emulator
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  files:
                    type: object
                    properties:
                      local:
                        type: object
                        properties:
                          name:
                            type: string
                          display:
                            type: string
                          path:
                            type: string
                          origin:
                            type: string
                            example: local

  '/organizations':
    post:
      summary: 'Create new organization'
      operationId: server.routes.organizations.create_organization
      tags:
        - organizations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
      responses:
        '201':
          description: 'Created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/organization_entity'

    get:
      summary: 'List organizations'
      operationId: server.routes.organizations.list_organizations
      tags:
        - organizations
      responses:
        '200':
          description: 'List of organizations'
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: list
                    items:
                      $ref: '#/components/schemas/organization_entity_for_user'


  '/organizations/{org_uuid}':
    patch:
      summary: 'Rename orgaization'
      operationId: server.routes.organizations.update_organization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
      tags:
        - organizations
      parameters:
        - $ref: '#/components/parameters/organization_uuid_param'
      responses:
        '200':
          description: 'Renamed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/organization_entity'
  '/organizations/{org_uuid}/printjobs':
    post:
      summary: 'Start printing gcode on a printer'
      operationId: server.routes.printjobs.printjob_create
      tags:
        - printjobs
      parameters:
        - $ref: '#/components/parameters/organization_uuid_param'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                gcode:
                  $ref: '#/components/schemas/uuid'
                printer:
                  $ref: '#/components/schemas/uuid'
      responses:
        '201':
          description: 'Printjob scheduled'
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_uuid:
                    $ref: '#/components/schemas/uuid'
                  uuid:
                    $ref: '#/components/schemas/uuid'
        '409':
          description: Could ot schedule a printjob
        '422':
          description: The job could not be scheduled due to invalid data (probably printer or gcode uuid).
          # TODO: describe general error response format
    get:
      summary: 'List printjobs'
      operationId: server.routes.printjobs.printjobs_list
      tags:
        - printjobs
      parameters:
        - $ref: '#/components/parameters/organization_uuid_param'
        - $ref: '#/components/parameters/limit_count_filter'
        - $ref: '#/components/parameters/start_with_filter'
        - $ref: '#/components/parameters/order_by_filter'
        - $ref: '#/components/parameters/fields_filter'
        - $ref: '#/components/parameters/filter_filter'
        - in: query
          name: printer_uuid
          description: Printer to list printjobs for
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: 'List of printjobs'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/printjob_detail'

  '/organizations/{org_uuid}/printjobs/{printjob_uuid}':
    get:
      summary: 'Get printjob detail'
      operationId: server.routes.printjobs.printjob_detail
      tags:
        - printjobs
      parameters:
        - $ref: '#/components/parameters/organization_uuid_param'
        - $ref: '#/components/parameters/printjob_uuid_param'
      responses:
        '200':
          description: 'Printjob detail'
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: list
                    items:
                      $ref: '#/components/schemas/printjob_detail'


  '/organizations/{org_uuid}/tasks':
    post:
      summary: >-
        Schedule a background task for an orgaization. Currently we have only on, scan_network,
        supported only in non-cloud mode. This one scans the network for any octoprint boxes.
      operationId: server.routes.tasks.enqueue_task
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                task:
                  type: string
                  enum: [scan_network]
      tags:
        - tasks
      parameters:
        - $ref: '#/components/parameters/organization_uuid_param'
      responses:
        '202':
          description: 'Task created'
        '400':
          description: Invalid task
        '500':
          description: Not allowed in clud mode





components:
  parameters:
    printer_uuid_param:
      name: printer_uuid
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/uuid'
    organization_uuid_param:
      name: org_uuid
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/uuid'
    printjob_uuid_param:
      name: printjob_uuid
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/uuid'
    user_uuid_param:
      name: user_uuid
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/uuid'
    gcode_uuid_param:
      name: gcode_uuid
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/uuid'
    local-tests-token:
      in: header
      name: X-local-tests-token
      schema:
        type: string
      required: true
    jti:
      name: jti
      in: path
      required: true
      schema:
        type: string
    limit_count_filter:
      in: query
      name: limit
      schema:
        type: integer
        minimum: 1
        default: 200
    start_with_filter:
      in: query
      name: start_with
      schema:
        $ref: '#/components/schemas/uuid'
    order_by_filter:
      in: query
      name: order_by
      schema:
        type: string
    fields_filter:
      in: query
      name: fields
      schema:
        type: string
    filter_filter:
      in: query
      name: filter
      schema:
        type: string

  schemas:
    uuid:
      type: string
      format: uuid
      pattern: '[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}'
    uuid_or_positive_integer:
      type: string
      pattern: '^((\d+$)|([0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}))'
    api_err_response:
      type: object
      properties:
        message:
          type: string
    local-tests-token:
      type: string
      description: Token provided via env variables to authenticate modifications for tests
    printer_response:
      type: object
      properties:
        client:
          type: object
          properties:
            access_level:
              type: string
              enum: [unlocked, locked, unknown]
              example: unlocked
            api_key:
              type: string
              example: ABCDEFXXXX123456
            connected:
              type: boolean
              example: true
            name:
              type: string
              example: octoprint
            pill_info:
              type: object
              properties:
                karmen_version:
                  type: string
                  example: 0.2.0
                update_available:
                  type: string
                  example: 0.2.2
                update_status:
                  type: string
                  example:
                version_number:
                  type: string
                  example: 0.2.0
            plugins:
              type: array
              items:
                type: string
              example: [karmen_awesome_led]
            version:
              type: object
              properties:
                api:
                  type: string
                  example: 0.1
                server:
                  type: string
                  example: 0.0.1
                text:
                  type: string
                  example: octoprint fake
        hostname:
          type: string
          example: karmen_printer.local
          format: hostname
        ip:
          type: string
          example: 192.168.1.42
          format: ipv4
        job:
          type: object
          properties:
            completion:
              type: number
              example: 42.42
            name:
              type: string
              example: holder_print.gcode
            printTime:
              type: number
              example: 3066
              description: Time in seconds
            printTimeLeft:
              type: number
              example: 6060
              description: Time in seconds
        lights:
          type: string
          enum: [off, on, unavailable]
          example: on
        name:
          type: string
          example: fake priter 1
        path:
          type: string
          example: ""
        port:
          type: integer
          example: 80
        printer_props:
          type: object
          properties:
            bed_type:
              type: string
              example: Powder coated PEI
            filament_color:
              type: string
              example: black
            filament_type:
              type: string
              example: PETG
            tool0_diameter:
              type: number
              example: 0.25
        protocol:
          type: string
          example: https
          enum: [http, https]
        status:
          type: object
          properties:
            state:
              type: string
              example: Printing
            temperature:
              type: object
              properties:
                bed:
                  type: object
                  properties:
                    actual:
                      type: number
                      example: 35.7
                    target:
                      type: number
                      example: 60
                tool0:
                  type: object
                  properties:
                    actual:
                      type: number
                      example: 35.7
                    target:
                      type: number
                      example: 270
        token:
          type: string
          example:
        uuid:
          type: string
          example: 20e91c14-c3e4-4fe9-a066-e69d53324a20
          format: uuid
        webcam:
          type: object
          properties:
            flipHorizontal:
              type: boolean
              example: false
            flipVertical:
              type: boolean
              example: false
            rotate90:
              type: boolean
              example: false
            url:
              type: string
              example: "/organizations/b3060e41-e319-4a9b-8ac4-e0936c75f275/printers/20e91c14-c3e4-4fe9-a066-e69d53324a20/webcam-snapshot"
    printer_by_token:
      type: object
      properties:
        name:
          type: string
          example: My printer
        token:
          type: string
          example: ABC123ABC
        api_key:
          type: string
          example: ""
        protocol:
          type: string
          example: http
          enum: [http, https]
      required:
        - name
        - token
    printer_by_network_props:
      type: object
      properties:
        protocol:
          type: string
          example: http
          enum: [http, https]
        ip:
          type: string
          example: 192.168.5.42
          format: ipv4
        port:
          type: integer
          example: 80
        hostname:
          type: string
          example: karmen.local
          format: hostname
        path:
          type: string
          example: ""
        name:
          type: string
          example: My Printer
        api_key:
          type: string
          example: ""
      required:
        - name
    organization_entity:
      description: basic organization response
      type: object
      properties:
        name:
          type: string
        uuid:
          $ref: '#/components/schemas/uuid'
    organization_entity_for_user:
      description: basic organization response
      type: object
      properties:
        name:
          type: string
        uuid:
          $ref: '#/components/schemas/uuid'
        role:
          type: string
          enum: [user, admin]
          description: User role in organization

    organization_user_profile:
      description: User profile for specific organization, contains basic user info and role in organization
      type: object
      properties:
          activated:
              type: boolean
              example: false
          role:
            type: string
            enum: [user, admin]
          email:
            type: string
            format: email
          username:
            type: string
          uuid:
            $ref: '#/components/schemas/uuid'
    gcode_detail:
      description: Contains all details about said gcode, like path, analysis, etc
      type: object
      properties:
        absolute_path:
          type: string
          format: path
          description: Absolute path to gcode on karmen's filesystem. Sent only on non-cloud mode
          example: "/tmp/karmen-files/b3060e41-e319-4a9b-8ac4-e0936c75f275/USB_SD_holder27x.gcode"
        analysis:
          type: object
          description: Analysis of gcode
          properties:
            filament:
              type: object
              properties:
                length_mm:
                  type: number
                  example: 183441.1
                type:
                  type: string
                  description: Filament type. Could be PLA, PET, and anything else that the slicer puts there
                volume_cm3:
                  type: number
                  description: Filament volume in cumic centimeters
            slicer:
              type: string
              description: Signature of the slicer
              example: PrusaSlicer 2.2.0-alpha2+linux-x64
            temperatures:
              type: object
              description: print temperatures for bed and tools
              properties:
                bed:
                  type: number
                bed_first:
                  type: number
                  description: temperature for bed for first layer
                tool0:
                  type: number
                tool0_first:
                  type: number
                  description: temperature for printhead for first layer
        data:
          type: string
          format: path
          description: path on karmen API to download gcode file
        display:
          type: string
          description: Display name
        filename:
          type: string
          description: Actual filename on filesystem, could be different from display name
        path:
          type: string
          format: path
          description: "Path to gcode in user's folder"
        size:
          type: integer
          description: filesize in bytes
        uploaded:
          type: string
          example: 2020-05-11T20:55:54.267945+00:00
          description: "Timestamp with timezone: YYYY-MM-DDTHH:MM:SS+HH:MM"
        user_uuid:
          $ref:  '#/components/schemas/uuid'
        username:
          type: string
        uuid:
          $ref: '#/components/schemas/uuid'
    printjob_detail:
      type: object
      properties:
        gcode_data:
          type: object
          properties:
            available:
              type: boolean
            fileame:
              type: string
            size:
              type: integer
            uuid:
              $ref: '#/components/schemas/uuid'
        printer_data:
          oneOf:
            - $ref: '#/components/schemas/printer_by_network_props'
            - $ref: '#/components/schemas/printer_by_token'
        printer_uuid:
          $ref: '#/components/schemas/uuid'
        user_uuid:
          $ref: '#/components/schemas/uuid'
        uuid:
          $ref: '#/components/schemas/uuid'
        started:
          type: string
          example: "2020-05-21T11:36:53.621361+00:00"
        username:
          type: string
    user_full_response:
      description: User profile info
      type: object
      properties:
        email:
          type: string
          format: email
        expires_on:
          type: string
          format: date-time
        force_pwd_change:
          type: boolean
        fresh:
          type: boolean
        identity:
          $ref: '#/components/schemas/uuid'
        system_role:
          type: string
          enum: [admin, user]
        username:
          type: string
        organizations:
          type: list
          items:
            $ref: '#/components/schemas/organization_entity'
    user_access_token_new:
      type: object
      properties:
        access_token:
          type: string
        created:
          type: string
          format: date-time
        jti:
          $ref: '#/components/schemas/uuid'
        name:
          type: string
        organization:
          $ref: '#/components/schemas/organization_entity'
    user_access_token_brief:
      type: object
      properties:
        created:
          type: string
          format: date-time
        jti:
          $ref: '#/components/schemas/uuid'
        name:
          type: string
        organization:
          $ref: '#/components/schemas/organization_entity'













  responses:
    invalid_UUID:
        description: >-
          Supplied UUID param was not valid UUID
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/api_err_response'
            example:
              message: Invalid uuid
