# This is for development only! Do not run a production instance from this blueprint.
version: "3.4"
services:

  proxy:
    image: fragaria/karmen-proxy
    build: ./src/proxy
    env_file: [base.env, dev.env, local.env]
    ports:
      - 127.0.0.1:4000:9766
    networks: [ backend, default ]
    depends_on: [ frontend, backend_flask, fake_ws_proxy ]

  frontend:
    image: fragaria/karmen-frontend
    build: ./src/karmen_frontend
    env_file: [base.env, dev.env, local.env]
    ports:
      - 127.0.0.1:3000:9765
    tty: true
    volumes:
      - ./src/karmen_frontend/src:/usr/src/app/src
      - ./src/karmen_frontend/public:/usr/src/app/public

  backend_flask: &backend_flask  # <-- bookmark
    image: fragaria/karmen-backend
    build: ./src/karmen_backend
    command: bash -c './scripts/migrate.sh && ./scripts/docker-start.sh'
    env_file: [base.env, dev.env, local.env]
    environment:
      SERVICE: flask
    ports:
      - 127.0.0.1:5000:9764
    volumes:
      - ./src/karmen_backend/server:/usr/src/app/server
      - ./tmp/karmen-files:/tmp/karmen-files
    networks: [ printers, backend ]
    depends_on: [ postgres ]
    links: [ postgres, redis ]

  postgres:
    image: postgres:11
    restart: unless-stopped
    env_file: [base.env, dev.env, local.env]
    volumes:
      - ./tmp/db-data:/var/lib/postgresql/data
    ports:
      - 127.0.0.1:5433:5432
    networks: [ backend ]

  backend_celery_worker:
    <<: *backend_flask  # <-- reuse items from &backend_flask bookmark
    # ... but skip migrations in backend_flask `command` property
    command: scripts/docker-start.sh
    environment:
      SERVICE: celery-worker
    ports: []

  backend_celery_beat:
    <<: *backend_flask  # <-- reuse items from &backend_flask bookmark
    # ... but skip migrations in backend_flask `command` property
    command: scripts/docker-start.sh
    environment:
      SERVICE: celery-beat
    ports: []
    networks: [ backend ]
    links: [ redis ]

  redis:
    image: redis:5
    env_file: [base.env, dev.env, local.env]
    networks: [ backend ]

  dummymailserver:
    image: fragaria/karmen-dummymailserver
    build: ./src/dummymailserver
    env_file: [base.env, dev.env, local.env]
    networks: [ backend ]
    ports:
      - 127.0.0.1:8088:8088

  fake_printer1:
    image: fragaria/karmen-fakeprinter
    build: ./src/fakeprinter
    env_file: [base.env, dev.env, local.env]
    environment:
      STATE_JOB_NAME: "fake-file-being-printed.gcode"
    networks:
      printers:
        ipv4_address: 172.16.236.11

  fake_printer2:
    image: fragaria/karmen-fakeprinter
    build: ./src/fakeprinter
    environment:
      STATE_JOB_NAME: "fake-file-being-printed.gcode"
    networks:
      printers:
        ipv4_address: 172.16.236.12

  fake_printer3:
    image: fragaria/karmen-fakeprinter
    build: ./src/fakeprinter
    environment:
      STATE_JOB_STATE: "Operational"
    networks:
      printers:
        ipv4_address: 172.16.236.13

  fake_ws_proxy:
    image: fragaria/karmen-fakewsproxy
    build: ./src/fakewsproxy
    networks: [ backend, printers ]

  key_issuer:
    image: fragaria/karmen-key-master
    environment:
      SECRET: 'your-super-secret-and-backed-up-private-keymaster-key'
      MAX_SUB_LENGTH: 64
    networks: [ backend ]

  api_doc:
    image: redocly/redoc
    environment:
      PAGE_TITLE: "Karmen OpenAPI"
      PAGE_FAVICON: ${FRONTEND_BASE_URL:-http://localhost:4000}/favicon.ico
      SPEC_URL: ${BACKEND_BASE_URL:-http://localhost:4000}/api/openapi-spec.yaml
      PORT: 9898
    networks: [ default, backend ]
    depends_on: [ backend_flask ]

networks:
  # backend network - must not be reachable by users
  backend: 
    ipam:
      config:
      - subnet: 172.16.235.0/24

  # printers - should be on a different network accessible only through
  # websocket proxy server
  printers:
    ipam:
      config:
      - subnet: 172.16.236.0/24
